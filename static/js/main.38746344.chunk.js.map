{"version":3,"sources":["components/Button.js","components/Board.js","components/Status.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","class","disabled","onClick","value","Board","tiles","map","id","status","winner","key","Status","currentPlayer","gameStatus","name","isDraw","WINNING_CONDITIONS","Game","state","board","Array","fill","symbol","nextPlayer","handleChange","bind","restartGame","this","doesInclude","index","some","row","every","slice","setState","getWinnerStatus","style","margin","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38746344.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = (props) => (\n  <button\n    className={props.class}\n    disabled={props.disabled}\n    onClick={props.onClick}>\n    {props.value}\n  </button>\n);\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\n\nconst Board = (props) => {\n  return (\n    <div className={props.class}>\n      {props.tiles.map((value, id) => (\n        <Button\n          class='tile'\n          disabled={props.status.winner || value}\n          key={id}\n          value={value}\n          onClick={() => props.onClick(id)}\n        />\n      ))}\n    </div>\n  )\n};\n\nexport default Board;","import React from 'react';\n\nconst Status = (props) => {\n  const { currentPlayer, status } = props;\n  let gameStatus = `${currentPlayer.name}'s Turn`;\n  status.isDraw && (gameStatus = 'Game Draw!');\n  status.winner && (gameStatus = `${status.winner.name} won!`)\n  return <h3>{gameStatus}</h3>\n}\n\nexport default Status;","import React from 'react';\nimport Button from './Button';\nimport Board from './Board';\nimport Status from './Status';\n\nconst WINNING_CONDITIONS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n];\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: Array(9).fill(null),\n      currentPlayer: { name: 'Player1', symbol: 'X' },\n      nextPlayer: { name: 'Player2', symbol: 'O' },\n      isDraw: false,\n      winner: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.restartGame = this.restartGame.bind(this);\n  }\n\n  getWinnerStatus(board) {\n    const { currentPlayer } = this.state;\n    const doesInclude = (index) => board[index] === currentPlayer.symbol;\n    const isWin = WINNING_CONDITIONS.some((row) => row.every(doesInclude));\n    return isWin ? currentPlayer : null;\n  }\n\n  handleChange(id) {\n    const board = this.state.board.slice();\n    board[id] = this.state.currentPlayer.symbol;\n\n    this.setState(({ currentPlayer, nextPlayer }) => ({\n      board: board,\n      currentPlayer: nextPlayer,\n      nextPlayer: currentPlayer,\n      isDraw: board.every((value) => value),\n      winner: this.getWinnerStatus(board)\n    }));\n  };\n\n  restartGame() {\n    this.setState({\n      board: Array(9).fill(null),\n      currentPlayer: { name: 'Player1', symbol: 'X' },\n      nextPlayer: { name: 'Player2', symbol: 'O' },\n      isDraw: false,\n      winner: null\n    })\n  }\n\n  render() {\n    const { isDraw, winner, currentPlayer, board } = this.state;\n    const status = { isDraw, winner };\n\n    return (\n      <div style={{ margin: '20px' }}>\n        <h1> Tic Tac Toe </h1>\n        <Board class='board' status={status} currentPlayer={currentPlayer} tiles={board} onClick={this.handleChange} />\n        <Status currentPlayer={currentPlayer} status={status} />\n        <Button value='Start New Game' onClick={this.restartGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;","import React from 'react';\nimport Game from './components/Game'\n\nconst App = (props) => {\n  return (\n    <Game />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}