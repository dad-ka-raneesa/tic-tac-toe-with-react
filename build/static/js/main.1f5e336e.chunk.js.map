{"version":3,"sources":["calculateWinner.js","components/Button.js","components/Board.js","components/Game.js","serviceWorker.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","Button","props","className","class","onClick","value","Board","map","square","id","key","Game","state","board","Array","fill","player1IsNext","winner","handleChange","bind","restartGame","this","setState","every","name","style","margin","getStatus","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAAO,SAASA,EAAgBC,GAY9B,IAXA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KChBT,IAQeG,EARA,SAACC,GAAD,OACb,4BACEC,UAAWD,EAAME,MACjBC,QAASH,EAAMG,SACdH,EAAMI,QCYIC,EAfD,SAACL,GACb,OACE,yBAAKC,UAAWD,EAAME,OACnBF,EAAMR,QAAQc,KAAI,SAACC,EAAQC,GAAT,OACjB,kBAAC,EAAD,CACEN,MAAM,SACNO,IAAKD,EACLJ,MAAOG,EACPJ,QAAS,kBAAMH,EAAMG,QAAQK,WCgDxBE,E,kDArDb,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACXC,MAAOC,MAAM,GAAGC,KAAK,MACrBC,eAAe,EACfC,OAAQ,MAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBARF,E,yDAWNV,GACX,IAAMI,EAAK,YAAOQ,KAAKT,MAAMC,OACzBQ,KAAKT,MAAMK,QAAUJ,EAAMJ,KAC/BI,EAAMJ,GAAMY,KAAKT,MAAMI,cAAgB,IAAM,IAC7CK,KAAKC,SAAS,CACZT,MAAOA,EACPG,eAAgBK,KAAKT,MAAMI,cAC3BC,OAAQzB,EAAgBqB,Q,oCAK1BQ,KAAKC,SAAS,CACZT,MAAOC,MAAM,GAAGC,KAAK,MACrBC,eAAe,EACfC,OAAQ,S,kCAMV,OADiBI,KAAKT,MAAMC,MAAMU,OAAM,SAACC,GAAD,OAAUA,KAEzC,YAELH,KAAKT,MAAMK,OACP,WAAN,OAAkBI,KAAKT,MAAMK,QAEzB,gBAAN,OAAuBI,KAAKT,MAAMI,cAAgB,IAAM,O,+BAIxD,OACE,yBAAKS,MAAO,CAAEC,OAAQ,SACpB,6CACA,kBAAC,EAAD,CAAOvB,MAAM,QAAQV,QAAS4B,KAAKT,MAAMC,MAAOT,QAASiB,KAAKH,eAC9D,2BAAIG,KAAKM,aACT,kBAAC,EAAD,CAAQtB,MAAM,iBAAiBD,QAASiB,KAAKD,mB,GAhDlCQ,IAAMC,WCOLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f5e336e.chunk.js","sourcesContent":["export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}","import React from 'react';\n\nconst Button = (props) => (\n  <button\n    className={props.class}\n    onClick={props.onClick}>\n    {props.value}\n  </button>\n);\n\nexport default Button;","import React from 'react';\nimport Button from './Button';\n\nconst Board = (props) => {\n  return (\n    <div className={props.class}>\n      {props.squares.map((square, id) => (\n        <Button\n          class='square'\n          key={id}\n          value={square}\n          onClick={() => props.onClick(id)}\n        />\n      ))}\n    </div>\n  )\n};\n\nexport default Board;","import React from 'react';\nimport { calculateWinner } from '../calculateWinner';\nimport Board from './Board';\nimport Button from './Button';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: Array(9).fill(null),\n      player1IsNext: true,\n      winner: null\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.restartGame = this.restartGame.bind(this);\n  }\n\n  handleChange(id) {\n    const board = [...this.state.board];\n    if (this.state.winner || board[id]) return;\n    board[id] = this.state.player1IsNext ? 'X' : 'O';\n    this.setState({\n      board: board,\n      player1IsNext: !this.state.player1IsNext,\n      winner: calculateWinner(board)\n    });\n  };\n\n  restartGame() {\n    this.setState({\n      board: Array(9).fill(null),\n      player1IsNext: true,\n      winner: null\n    })\n  }\n\n  getStatus() {\n    const isFilled = this.state.board.every((name) => name);\n    if (isFilled) {\n      return 'Game Draw';\n    }\n    if (this.state.winner) {\n      return `Winner: ${this.state.winner}`;\n    }\n    return `Next player: ${this.state.player1IsNext ? 'X' : 'O'}`\n  }\n\n  render() {\n    return (\n      <div style={{ margin: '20px' }}>\n        <h1> Tic Tac Toe </h1>\n        <Board class='board' squares={this.state.board} onClick={this.handleChange} />\n        <p>{this.getStatus()}</p>\n        <Button value='Start New Game' onClick={this.restartGame} />\n      </div>\n    );\n  }\n}\n\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}